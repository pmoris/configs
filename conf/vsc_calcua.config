// Define the scratch directory, which will be used for storing the nextflow
// work directory and for caching apptainer/singularity files.
// Default to /tmp directory if $VSC_SCRATCH scratch env is not available,
// see: https://github.com/nf-core/configs?tab=readme-ov-file#adding-a-new-config
def scratch_dir = System.getenv("VSC_SCRATCH") ?: "/tmp"

// Specify the work directory.
workDir = "$scratch_dir/work"

// Perform work directory cleanup when the run has succesfully completed.
cleanup = true

// Function to check if the selected partition profile matches the partition on which the master
// nextflow job was launched (either implicitly or via `sbatch --partition=<partition-name>`).
// If the profile type is `*_single` and the partitions do not match, stop the execution and
// warn the user.
// Only applies to the `*_single` profile types.
def partition_checker(String profile) {
    def current_partition = System.getenv("SLURM_JOB_PARTITION")
    if (! current_partition) {
        System.err.println("\nWARNING: Current partition could not be found in the expected \$SLURM_JOB_PARTITION environment variable. Please make sure that you submit your pipeline via a Slurm job instead of running the nextflow command directly on a login node.\nExiting...\n")
        System.exit(1)
    } else if ( current_partition != profile) {
        System.err.println("\nWARNING: Slurm job was launched on the \'$current_partition\' partition, but the selected nextflow profile points to the $profile partition instead ('${profile}_single'). When using one of the single node execution profiles, please launch the job on the corresponding partition in Slurm.\nE.g., Slurm job submission command:\n    sbatch --account <project_account> --partition=broadwell script.slurm\nand job script containing a nextflow command with matching profile section:\n    nextflow run <pipeline> -profile vsc_calcua,broadwell_single\nExiting...\n")
        System.exit(1)
    }
}

// Reduce the job submit rate to about 30 per minute, this way the server
// won't be bombarded with jobs.
// Limit queueSize to keep job rate under control and avoid timeouts.
// Extend the exit read timeout to 3 days (= wall time of vaughan and leibniz).
// See: https://www.nextflow.io/docs/latest/config.html#scope-executor
executor {
    submitRateLimit = '30/1min'
    queueSize = 10
    exitReadTimeout = "3day"
}

// Add backoff strategy to catch cluster timeouts and proper symlinks of files in scratch
// to the work directory.
// See: https://www.nextflow.io/docs/latest/config.html#scope-process
process {
    stageInMode = "symlink"
    stageOutMode = "rsync"
    errorStrategy = { sleep(Math.pow(2, task.attempt ?: 1) * 200 as long); return 'retry' }
    maxRetries = 5
}

// Specify that apptainer/singularity should be used and where the cache dir will be for the images.
// The singularity directive is used in favour of the apptainer one, because currently the apptainer
// variant will pull in (and convert) docker images, instead of using pre-built singularity ones.
// To use the pre-built singularity containers instead, the singularity options should be selected
// with apptainer installed on the system, which defines singularity as an alias (as is the case
// on CalcUA).
// See https://nf-co.re/docs/usage/installation#pipeline-software
// and https://nf-co.re/tools#how-the-singularity-image-downloads-work
// See https://www.nextflow.io/docs/latest/config.html#scope-singularity
singularity {
    enabled = true
    autoMounts = true
    // See https://www.nextflow.io/docs/latest/singularity.html#singularity-docker-hub
    cacheDir = "$scratch_dir/apptainer/nextflow_cache"  // Equivalent to NXF_APPTAINER_CACHEDIR/NXF_SINGULARITY_CACHEDIR
}

// AWS maximum retries for errors (This way the pipeline doesn't fail if the download fails one time)
aws {
    maxErrorRetry = 3
}

// Define profiles for the following partitions:
// - zen2 (Vaughan)
// - broadwell (Leibniz)
// - skylake (Breniac, formerly Hopper)
// For each partition, there is both a regular profile (named after the partition)
// and a single node profile (named with "*_single" suffix).
// The former uses the slurm executor to submit each nextflow task as a separate job,
// whereas the latter runs all tasks on the same local node on which the nextflow
// head process was launched.
// See: https://www.nextflow.io/docs/latest/config.html#config-profiles
profiles {
    // Vaughan partitions
    zen2 {
        params {
            config_profile_description = 'Zen2 Slurm profile for use on the Vaughan cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/vaughan_hardware.html'
            max_memory = 240.GB // 256 GB (total) - 16 GB (buffer)
            max_cpus = 64
            max_time = '3days'
        }
        process {
            executor = 'slurm'
            queue = 'zen2'
        }
    }
    zen2_single {
        params {
            config_profile_description = 'Zen2 single node profile for use on the Vaughan cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/vaughan_hardware.html'
            max_memory = 240.GB // 256 GB (total) - 16 GB (buffer)
            max_cpus = 64
            max_time = '3days'
        }
        process {
            executor = 'local'
        }
        partition_checker("zen2")
    }

    // Leibniz partitions
    broadwell {
        params {
            config_profile_description = 'Broadwell Slurm profile for use on the Leibniz cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/leibniz_hardware.html'
            max_memory = 240.GB // 128 GB (total) - 16 GB (buffer) (or 256 - 16 GB for the mem256 nodes)
            max_cpus = 28
            max_time = '3days'
        }
        process {
            executor = 'slurm'
            queue = 'broadwell'
        }
    }
    broadwell_single {
        params {
            config_profile_description = 'Broadwell single node profile for use on the Leibniz cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/leibniz_hardware.html'
            max_memory = 112.GB // 128 GB (total) - 16 GB (buffer)
            max_cpus = 28
            max_time = '3days'
        }
        process {
            executor = 'local'
        }
        partition_checker("broadwell")
    }

    // Breniac (previously Hopper) partitions
    skylake {
        params {
            config_profile_description = 'Skylake Slurm profile for use on the Breniac (former Hopper) cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://www.uantwerpen.be/en/research-facilities/calcua/infrastructure/'
            max_memory = 176.GB // 192 GB (total) - 16 GB (buffer)
            max_cpus = 28
            max_time = '7days'
        }
        process {
            executor = 'slurm'
            queue = 'skylake'
        }
    }
    skylake_single {
        params {
            config_profile_description = 'Skylake single node profile for use on the Breniac (former Hopper) cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://www.uantwerpen.be/en/research-facilities/calcua/infrastructure/'
            max_memory = 176.GB // 192 GB (total) - 16 GB (buffer)
            max_cpus = 28
            max_time = '7days'
        }
        process {
            executor = 'local'
        }
        partition_checker("skylake")
    }
}
