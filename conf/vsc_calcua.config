// Define the scratch directory, which will be used for storing the nextflow
// work directory and for caching apptainer/singularity files.
// Default to /tmp directory if $VSC_SCRATCH scratch env is not available,
// see: https://github.com/nf-core/configs?tab=readme-ov-file#adding-a-new-config
def scratch_dir = System.getenv("VSC_SCRATCH") ?: "/tmp"

// Specify the work directory. Can be overwritten via the cli flag `-work-dir`.
workDir = "$scratch_dir/work"

// Perform work directory cleanup when the run has succesfully completed.
cleanup = true

// Check if environment variables for singularity/apptainer/nextflow cache and tmp dirs are set:
// - APPTAINER_TMPDIR/SINGULARITY_TMPDIR (warn if missing, apptainer defaults to $TMPDIR or /tmp)
// - APPTAINER_CACHEDIR/SINGULARITY_CACHEDIR (exit with error if missing, apptainer would default to $HOME otherwise)
// - NXF_APPTAINER_CACHEDIR/NXF_SINGULARITY_CACHEDIR (warn and set to $scratch_dir/apptainer/nextflow_cache if missing)
// Note that only the third env var can be set inside of this config file (cacheDir), because
// the env scope only provides env vars to tasks, not to the launch environment.
// See https://www.nextflow.io/docs/latest/config.html#scope-env

// Define variables outside of conditional scope to make them usable elsewhere
def apptainer_tmpdir = System.getenv("APPTAINER_TMPDIR") ?: System.getenv("SINGULARITY_TMPDIR") ?: null
def apptainer_cachedir = System.getenv("APPTAINER_CACHEDIR") ?: System.getenv("SINGULARITY_CACHEDIR") ?: null
def nxf_apptainer_cachedir = System.getenv("NXF_APPTAINER_CACHEDIR") ?: System.getenv("NXF_SINGULARITY_CACHEDIR") ?: null

// Skip check if host is not CalcUA, to avoid hindering github actions.
if ( System.getenv("VSC_INSTITUTE") == "antwerpen" ) {
    // APPTAINER_TMPDIR/SINGULARITY_TMPDIR environment variable
    if ( !apptainer_tmpdir ) {
        // Apptainer defaults to $TMPDIR or /tmp (on the SLURM execution node) if this env var is not set.
        // See https://apptainer.org/docs/user/main/build_env.html#temporary-folders
        def tmp_dir = System.getenv("TMPDIR") ?: "/tmp"
        System.err.println("\nWARNING: APPTAINER_TMPDIR/SINGULARITY_TMPDIR environment variable was not found.\nPlease add the line 'export APPTAINER_TMPDIR=\"\${VSC_SCRATCH}/apptainer/tmp\"' to your ~/.bashrc file (or set it with sbatch or in your job script).\nDefaulting to local $tmp_dir on the execution node of the Nextflow head process.\n")
    } else {
        // If set, try to create the tmp directory at the specified location to avoid errors during
        // docker image conversion (note that this only happens when no native singulariry/apptainer
        // images are available):
        //      FATAL:   While making image from oci registry: error fetching image to cache: while
        //      building SIF from layers: unable to create new build: failed to create build parent dir:
        //      stat /scratch/antwerpen/203/vsc20380/apptainer/tmp: no such file or directory
        apptainer_tmpdir = new File(apptainer_tmpdir)
        if (! apptainer_tmpdir.exists() ) {
            try {
                dir_created = apptainer_tmpdir.mkdirs()
            } catch (java.io.IOException e) {
                System.err.println("\nERROR: Could not create directory at the location specified by APPTAINER_TMPDIR/SINGULARITY_TMPDIR: $apptainer_tmpdir\nPlease check if this is a valid path to which you have write permission. Exiting...\n")
            }
        }
    }
    // APPTAINER_CACHEDIR/SINGULARITY_CACHEDIR
    if ( !apptainer_cachedir ) {
        System.err.println("\nERROR: APPTAINER_CACHEDIR/SINGULARITY_CACHEDIR environment variable was not found.\nPlease add the line 'export APPTAINER_CACHEDIR=\"\${VSC_SCRATCH}/apptainer/cache\"' to your ~/.bashrc file (or set it with sbatch or in your job script).\nUsing the default storage location of Singularity/Apptainer ~/.apptainer/cache/. Read more about why this should be avoided in the VSC docs: https://docs.vscentrum.be/software/singularity.html#building-on-vsc-infrastructure\n")
        System.exit(1)
    }
    // NXF_APPTAINER_CACHEDIR/NXF_SINGULARITY_CACHEDIR
    if ( !nxf_apptainer_cachedir ) {
        nxf_apptainer_cachedir = "$scratch_dir/apptainer/nextflow_cache"
        System.err.println("\nWARNING: NXF_APPTAINER_CACHEDIR/NXF_SINGULARITY_CACHEDIR environment variable was not found.\nPlease add the line 'export NXF_APPTAINER_CACHEDIR=\"\${VSC_SCRATCH}/apptainer/nextflow_cache\"' to your ~/.bashrc file (or set it with sbatch or in your job script) to choose the location of the Nextflow container image cache.\nDefaulting to $nxf_apptainer_cachedir (instead of the Nextflow work directory).\n")
    }
}

// Function to check if the selected partition profile matches the partition on which the head
// nextflow job was launched (either implicitly or via `sbatch --partition=<partition-name>`).
// Only used for local execution profiles.
// If no partition is found (as on the login nodes), warn the user, but do not immediately exit
// to still allow debugging and testing.
// If the profile type is `*_local` and the partitions do not match, stop the execution and warn the user.
def partition_checker(String profile) {
    // Skip check if host machine is not CalcUA, in order to not hinder github actions.
    if ( System.getenv("VSC_INSTITUTE") != "antwerpen" ) {
        return
    }
    def current_partition = System.getenv("SLURM_JOB_PARTITION")
    if (! current_partition) {
        System.err.println("\nWARNING: Current partition could not be found in the expected \$SLURM_JOB_PARTITION environment variable. Please make sure that you submit your pipeline via a Slurm job or in an interactive `srun` session, instead of running the nextflow command directly on a login node.\n")
        // TODO: optional exit here, but this makes debugging and testing more difficult.
    }
    else if (current_partition != profile) {
        System.err.println("\nERROR: Slurm job was launched on the \'$current_partition\' partition, but the selected nextflow profile points to the $profile partition instead ('${profile}_local'). When using one of the local node execution profiles, please launch the job on the corresponding partition in Slurm.\nE.g., Slurm job submission command:\n    sbatch --account <project_account> --partition=broadwell script.slurm\nand job script containing a nextflow command with matching profile section:\n    nextflow run <pipeline> -profile vsc_calcua,broadwell_local\nAborting run...\n")
        System.exit(1)
    }
}

// Reduce the job submit rate to about 30 per minute, this way the server
// won't be bombarded with jobs.
// Limit queueSize to keep job rate under control and avoid timeouts.
// Set read timeout to the maximum wall time.
// See: https://www.nextflow.io/docs/latest/config.html#scope-executor
executor {
    submitRateLimit = '30/1min'
    queueSize = 10
    exitReadTimeout = "10 min"
}

// Add backoff strategy to catch cluster timeouts and proper symlinks of files in scratch
// to the work directory.
// See: https://www.nextflow.io/docs/latest/config.html#scope-process
process {
    stageInMode = "symlink"
    stageOutMode = "rsync"
    errorStrategy = { sleep(Math.pow(2, task.attempt ?: 1) * 200 as long); return 'retry' }
    maxRetries = 3
}

// Specify that apptainer/singularity should be used and where the cache dir will be for the images.
// Singularity is used in favour of apptainer, because currently the apptainer
// variant will pull in (and convert) docker images, instead of using pre-built singularity ones.
// On a system where singularity is defined as an alias for apptainer (as is the case on CalcUA),
// this works out fine and results in pre-built singularity containers being downloaded.
// See https://nf-co.re/docs/usage/installation#pipeline-software
// and https://nf-co.re/tools#how-the-singularity-image-downloads-work
// See https://www.nextflow.io/docs/latest/config.html#scope-singularity
singularity {
    enabled = true
    autoMounts = true
    // See https://www.nextflow.io/docs/latest/singularity.html#singularity-docker-hub
    cacheDir = "$nxf_apptainer_cachedir" // Equivalent to setting NXF_APPTAINER_CACHEDIR/NXF_SINGULARITY_CACHEDIR environment variable
}

// Define profiles for the following partitions:
// - zen2, zen3, zen3_512 (Vaughan)
// - broadwell, broadwell_256 (Leibniz)
// - skylake (Breniac, formerly Hopper)
// For each partition, there is a "*_slurm" profile and a "*_local" profile.
// The former uses the slurm executor to submit each nextflow task as a separate job,
// whereas the latter runs all tasks on the individual node on which the nextflow
// master process was launched.
// See: https://www.nextflow.io/docs/latest/config.html#config-profiles
profiles {
    // Automatic slurm partition selection based on task requirements
    slurm {
        params {
            config_profile_description = 'Slurm profile with automatic partition selection for use on the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware.html'
            max_memory = 496.GB // = max memory of high memory nodes
            max_cpus = 64   // = cpu count of largest nodes
            max_time = 7.day    // wall time of longest running nodes
        }
        process {
            executor = 'slurm'
            queue = {
                // long running
                if ( task.time > 3.day ) {
                    'skylake'
                // high memory
                } else if ( task.memory > 240.GB ) {
                    'zen3_512'
                // medium memory and high cpu
                } else if ( task.memory > 112.GB && task.cpus > 28 ) {
                    'zen2,zen3'
                // medium memory and lower cpu
                } else if ( task.memory > 112.GB && task.cpus < 28 ) {
                    'broadwell_256,zen2,zen3'
                // lower memory and high cpu
                } else if ( task.cpus > 28 ) {
                    'zen2,zen3'
                // lower memory and lower cpu
                } else {
                    'broadwell,skylake,zen2,zen3'
                }
            }
        }
    }
    // Vaughan partitions
    zen2_slurm {
        params {
            config_profile_description = 'Zen2 Slurm profile for use on the Vaughan cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/vaughan_hardware.html'
            max_memory = 240.GB // 256 GB (total) - 16 GB (buffer)
            max_cpus = 64
            max_time = 3.day
        }
        process {
            executor = 'slurm'
            queue = 'zen2'
        }
    }
    zen2_local {
        params {
            config_profile_description = 'Zen2 local profile for use on a single node of the Vaughan cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/vaughan_hardware.html'
            max_memory = get_allocated_mem(240) // 256 GB (total) - 16 GB (buffer)
            max_cpus = get_allocated_cpus(64)
            max_time = 3.day
        }
        process {
            executor = 'local'
        }
        partition_checker("zen2")
    }
    zen3_slurm {
        params {
            config_profile_description = 'Zen3 Slurm profile for use on the Vaughan cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/vaughan_hardware.html'
            max_memory = 240.GB // 256 GB (total) - 16 GB (buffer)
            max_cpus = 64
            max_time = 3.day
        }
        process {
            executor = 'slurm'
            queue = 'zen3'
        }
    }
    zen3_local {
        params {
            config_profile_description = 'Zen3 local profile for use on a single node of the Vaughan cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/vaughan_hardware.html'
            max_memory = get_allocated_mem(240) // 256 GB (total) - 16 GB (buffer)
            max_cpus = get_allocated_cpus(64)
            max_time = 3.day
        }
        process {
            executor = 'local'
        }
        partition_checker("zen3")
    }
    zen3_512_slurm {
        params {
            config_profile_description = 'Zen3_512 Slurm profile for use on the Vaughan cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/vaughan_hardware.html'
            max_memory = 496.GB // 512 GB (total) - 16 GB (buffer)
            max_cpus = 64
            max_time = 3.day
        }
        process {
            executor = 'slurm'
            queue = 'zen3_512'
        }
    }
    zen3_512_local {
        params {
            config_profile_description = 'Zen3_512 local profile for use on a single node of the Vaughan cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/vaughan_hardware.html'
            max_memory = get_allocated_mem(496) // 512 GB (total) - 16 GB (buffer)
            max_cpus = get_allocated_cpus(64)
            max_time = 3.day
        }
        process {
            executor = 'local'
        }
        partition_checker("zen3_512")
    }
    // Leibniz partitions
    broadwell_slurm {
        params {
            config_profile_description = 'Broadwell Slurm profile for use on the Leibniz cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/leibniz_hardware.html'
            max_memory = 112.GB // 128 GB (total) - 16 GB (buffer)
            max_cpus = 28
            max_time = 3.day
        }
        process {
            executor = 'slurm'
            queue = 'broadwell'
        }
    }
    broadwell_local {
        params {
            config_profile_description = 'Broadwell local profile for use on a single node of the Leibniz cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/leibniz_hardware.html'
            max_memory = get_allocated_mem(112) // 128 GB (total) - 16 GB (buffer)
            max_cpus = get_allocated_cpus(28)
            max_time = 3.day
        }
        process {
            executor = 'local'
        }
        partition_checker("broadwell")
    }
    broadwell_256_slurm {
        params {
            config_profile_description = 'Broadwell_256 Slurm profile for use on the Leibniz cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/leibniz_hardware.html'
            max_memory = 240.GB // 256 (total) - 16 GB (buffer)
            max_cpus = 28
            max_time = 3.day
        }
        process {
            executor = 'slurm'
            queue = 'broadwell_256'
        }
    }
    broadwell_256_local {
        params {
            config_profile_description = 'Broadwell_256 local profile for use on a single node of the Leibniz cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://docs.vscentrum.be/antwerp/tier2_hardware/leibniz_hardware.html'
            max_memory = get_allocated_mem(240) // 256 (total) - 16 GB (buffer)
            max_cpus = get_allocated_cpus(28)
            max_time = 3.day
        }
        process {
            executor = 'local'
        }
        partition_checker("broadwell_256")
    }
    // Breniac (previously Hopper) partitions
    skylake_slurm {
        params {
            config_profile_description = 'Skylake Slurm profile for use on the Breniac (former Hopper) cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://www.uantwerpen.be/en/research-facilities/calcua/infrastructure/'
            max_memory = 176.GB // 192 GB (total) - 16 GB (buffer)
            max_cpus = 28
            max_time = 7.day
        }
        process {
            executor = 'slurm'
            queue = 'skylake'
        }
    }
    skylake_local {
        params {
            config_profile_description = 'Skylake local profile for use on a single node of the Breniac (former Hopper) cluster of the CalcUA VSC HPC.'
            config_profile_contact = 'pmoris@itg.be (GitHub: @pmoris)'
            config_profile_url = 'https://www.uantwerpen.be/en/research-facilities/calcua/infrastructure/'
            max_memory = get_allocated_mem(176) // 192 GB (total) - 16 GB (buffer)
            max_cpus = get_allocated_cpus(28)
            max_time = 7.day
        }
        process {
            executor = 'local'
        }
        partition_checker("skylake")
    }
}

    // Define functions to fetch the available CPUs and memory of the current execution node.
// Only used when running one of the *_local partition profiles and allows the cpu
// and memory thresholds to be set dynamic based on the available hardware as reported
// by Slurm. Can be supplied with a default return value, which should be set to the
// recommended thresholds for the particular partition's node types.
def get_allocated_cpus(int node_max_cpu) {
    max_cpus = System.getenv("SLURM_CPUS_PER_TASK") ?: System.getenv("SLURM_JOB_CPUS_PER_NODE") ?: node_max_cpu
    return max_cpus.toInteger()
}

def get_allocated_mem(int node_max_mem) {
    // default to max memory of node per partition type
    int max_mem = node_max_mem

    // grab environment variables with memory and cpu info
    def mem_per_cpu = System.getenv("SLURM_MEM_PER_CPU")
    def mem_per_node = System.getenv("SLURM_MEM_PER_NODE")
    def cpus_per_task = System.getenv("SLURM_CPUS_PER_TASK") ?: System.getenv("SLURM_JOB_CPUS_PER_NODE")

    // Check if memory is requested per cpu and the number of cpus was also set
    if ( mem_per_cpu && cpus_per_task ) {
        max_mem = mem_per_cpu.toInteger() / 1000 * cpus_per_task.toInteger()
    }
    // Check if total/node memory was requested instead
    else if ( mem_per_node ) {
        max_mem = mem_per_node.toInteger() / 1000
    }
    // return in expected GB string format
    return "${max_mem}.GB"
}
